#!/usr/bin/env python
"""
Recoll implementation of a xesam server. 
Based on the example in the xesam-tools package by:
 Mikkel Kamstrup Erlandsen <mikkel.kamstrup@gmail.com>

Run it like

xesam-recoll-service 

And launch a search on it via

  xesam-tool search hello

"""

# Sets up path to uninstalled xesam module
import demo

import xesam
import xesam.query
import xesam.server
import gobject
import sys

import datetime
import recoll

def timestampToIso8601(ts):
    return datetime.datetime.fromtimestamp(long(ts)).isoformat()

class RecollServer (xesam.server.Searcher):
    """
        
    """
    
    def __init__ (self):
        h_fact = xesam.server.HandleFactory ()
        fact = xesam.server.ClientFactory (self, h_fact, 
                                           RecollSession, RecollSearch)
        xesam.server.Searcher.__init__ (self, h_fact, fact)
        self.set_echo_queries (True)
        self.rcldb = recoll.connect()

    def start (self):
        # Export our selves via a SearchServerStub
        xesam.server.SearchServerStub(self).start()
    
    def GetProperty (self, shandle, name):
        prop = xesam.server.Searcher.GetProperty(self, shandle, name)
        xesam.debug ("Got property request for '%s' on session '%s', returning %s" % (name, shandle, prop))
        return prop
    
    def SetProperty (self, shandle, name, value):
        val = xesam.server.Searcher.SetProperty(self, shandle, name, value)
        xesam.debug ("Set property request for '%s=%s', on session '%s', returning %s" % (name, value, shandle,val))
        return val

class RecollSession (xesam.server.Session):
    """
    
    """
    def __init__ (self, searcher, session_handle):
        xesam.server.Session.__init__ (self, searcher, session_handle)
        self.set_property ("recoll.org", "xesam-recoll-service")
        
class RecollSearch (xesam.server.Search):
    """
        
    """

    SLICE = 10

    def __init__ (self, searcher, session, search_handle, \
                      query=None, xml=None) :
        xesam.server.Search.__init__ (self, searcher, session, search_handle, \
                             query=query, xml=xml)
       
        self._hit_fields = session.get_property (xesam.SESSION_HIT_FIELDS)
        if self._hit_fields is None:
            xesam.error ("Got property hit.fields as None."
                             " Setting default xesam:url")
            self._hit_fields = ["xesam:url"]
        xesam.debug("RecollSearch: fields:" % self._hit_fields)
        xesam.debug ("Created %s with handle %s and query:\n%s" % 
                     (self.__class__, self.get_handle(), self.get_query()))

        # Only user queries for now...
        if not isinstance(self.get_query(), xesam.query.UserQuery):
            raise Exception ("Only UserQuery supported ATM, sorry.")
        self.rclquery = self._searcher.rcldb.query()
        
        # In the latest version (>0.95), primary/secondary is replaced by 
        # a field list.
        sortfield = session.get_property(xesam.SESSION_SORT_PRIMARY)
        order = session.get_property(xesam.SESSION_SORT_ORDER)

        # xesam-tool does not know how to set these for now, so let's
        # TEST here
        sortfield = "contentModified"
        order = "descending"
        xesam.debug("Session sort primary %s order %s" % (sortfield, order))
        # END TEST

        if sortfield:
            self.rclquery.sortby(sortfield, order == "ascending" and 1 or 0)

    def start (self):
        xesam.debug ("RecollSearch '%s' got [%s]" % 
                     (self.get_handle(), self.get_query().get_string()))
        self.nres = self.rclquery.execute(self.get_query().get_string())
        hits = 0
        done = 0
        while self.rclquery.next >= 0 and self.rclquery.next < self.nres:
            doc = self.rclquery.fetchone()
            data = []
            for fld in self._hit_fields:
                # Need to handle ContentCategory and SourceCategory
                fld = fld.lower().replace("xesam:", "")
                xesam.debug("Adding data for fld %s" % (fld))
                if fld == "snippet":
                    data.append(self._searcher.rcldb.makeDocAbstract(doc, 
                                                                self.rclquery))
                elif fld == "contentmodified":
                    data.append(timestampToIso8601(getattr(doc, "mtime")))
                else:
                    data.append(getattr(doc, fld, ""))
            self.add_new_hit (self._hit_fields, data)
            hits += 1
            if hits >= self.SLICE:
                break
        else:
            done = 1

        if hits > 0:
            self.emit ("hits-added", hits)
            xesam.debug ("Search '%s' emitted 'hits-added' %d" % \
                         (self.get_handle(), hits))
        if done:
            self.emit ("done")
            xesam.debug ("Search '%s' emitted 'done'" % self.get_handle())
            self.stop()


    def get_hits(self, num_hits):
        xesam.debug ("RecollSearch get_hits")

        if self._stopped:
            return xesam.server.Search.get_hits(self, num_hits)

        hits = 0
        done = 0;
        while self.rclquery.next >= 0 and self.rclquery.next < self.nres:
            doc = self.rclquery.fetchone()
            data = []
            for fld in self._hit_fields:
                if self.FLDTRANS.has_key (fld):
                    data.append(self.FLDTRANS[fld](doc))
                else:
                    data.append("")
            self.add_new_hit (self._hit_fields, data)
            hits += 1
            if hits >= self.SLICE or hits >= num_hits:
                break
        else:
            done = 1

        if hits > 0:
            self.emit ("hits-added", hits)
            xesam.debug ("Search '%s' emitted 'hits-added' %d" % \
                         (self.get_handle(), hits))
        if done:
            self.emit ("done")
            xesam.debug ("Search '%s' emitted 'done'" % self.get_handle())
            self.stop()

        return xesam.server.Search.get_hits(self, num_hits)


if __name__ == "__main__":
    RecollServer().start()
